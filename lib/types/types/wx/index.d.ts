import { AgentConfigParams, CheckJsApiParams, ConfigParams } from "./basic";
import { WxFnCallback, WxInvokeCallback } from "./common";
import { OpenEnterpriseChatParams } from "./session";
import { HideMenuItemsParams, OnMenuShareAppMessageParams, OnMenuShareWechat, ScanQRCodeParams, ShowMenuItemParams } from "./ui";
import { ChooseImageParams, DownloadImageParams, DownloadVoiceParams, GetLocalImgDataParams, OnVoicePlayEndParams, OnVoiceRecordEndParams, PauseVoiceParams, PlayVoiceParams, PreviewFileParams, PreviewImageParams, StopRecordParams, StopVoiceParams, TranslateVoiceParams, UploadImageParams } from "./media";
import { BluetoothDevice, CloseBLEConnectionParams, CloseBluetoothAdapterParams, ConnectWifiParams, CreateBLEConnectionParams, GetBeaconsParams, GetBLEDeviceCharacteristicsParams, GetBLEDeviceServicesParams, GetBluetoothAdapterStateParams, GetBluetoothDevicesParams, GetClipboardDataParams, GetConnectedBluetoothDevicesParams, GetConnectedWifiParams, GetLocationParams, GetNetworkTypeParams, GetWifiListParams, OnGetWifiListRes, NotifyBLECharacteristicValueChangeParams, OnBeaconServiceChangeRes, OnBeaconUpdateRes, OnBLECharacteristicValueChangeRes, OnBLEConnectionStateChangeRes, OnLocationChangeRes, OnNetworkStatusChangeRes, OnWifiConnectedParams, OpenBluetoothAdapterParams, OpenLocationParams, ReadBLECharacteristicValueParams, SetClipboardDataParams, StartBeaconDiscoveryParams, StartBluetoothDevicesDiscoveryParams, StartWifiParams, StopBeaconDiscoveryParams, StopBluetoothDevicesDiscoveryParams, StopWifiParams, WriteBLECharacteristicValueParams, OnGetBluetoothAdapterStateRes } from "./device";
import { InvokeMap } from "../apis/InvokeMap";
export interface Wx {
    checkJsApi: (params: CheckJsApiParams) => void;
    config: (configParams: ConfigParams) => void;
    ready: (callback: () => void) => void;
    error: (callback: WxFnCallback) => void;
    agentConfig: (agentConfigParams: AgentConfigParams) => void;
    openEnterpriseChat: (params: OpenEnterpriseChatParams) => void;
    onMenuShareAppMessage: (params: OnMenuShareAppMessageParams) => void;
    onMenuShareWechat: (params: OnMenuShareWechat) => void;
    onMenuShareTimeline: (params: OnMenuShareAppMessageParams) => void;
    onHistoryBack: (callback: () => {}) => void;
    hideOptionMenu: () => void;
    showOptionMenu: () => void;
    closeWindow: () => void;
    hideMenuItems: (params: HideMenuItemsParams) => void;
    showMenuItems: (params: ShowMenuItemParams) => void;
    hideAllNonBaseMenuItem: () => void;
    showAllNonBaseMenuItem: () => void;
    onUserCaptureScreen: (callback: () => {}) => void;
    scanQRCode: (params: ScanQRCodeParams) => void;
    getLocalImgData: (params: GetLocalImgDataParams) => void;
    chooseImage: (params: ChooseImageParams) => void;
    onNetworkStatusChange: (callback: (params: OnNetworkStatusChangeRes) => void) => void;
    previewImage: (params: PreviewImageParams) => void;
    uploadImage: (params: UploadImageParams) => void;
    downloadImage: (params: DownloadImageParams) => void;
    startRecord: () => void;
    stopRecord: (params: StopRecordParams) => void;
    onVoiceRecordEnd: (params: OnVoiceRecordEndParams) => void;
    playVoice: (params: PlayVoiceParams) => void;
    pauseVoice: (params: PauseVoiceParams) => void;
    stopVoice: (params: StopVoiceParams) => void;
    onVoicePlayEnd: (params: OnVoicePlayEndParams) => void;
    uploadVoice: (params: UploadImageParams) => void;
    downloadVoice: (params: DownloadVoiceParams) => void;
    translateVoice: (params: TranslateVoiceParams) => void;
    previewFile: (params: PreviewFileParams) => void;
    startWifi: (params: StartWifiParams) => void;
    stopWifi: (params: StopWifiParams) => void;
    connectWifi: (params: ConnectWifiParams) => void;
    getWifiList: (params: GetWifiListParams) => void;
    onGetWifiList: (callback: WxFnCallback<OnGetWifiListRes>) => void;
    onWifiConnected: (callback: WxFnCallback<OnWifiConnectedParams>) => void;
    getConnectedWifi: (params: GetConnectedWifiParams) => void;
    openBluetoothAdapter: (params: OpenBluetoothAdapterParams) => void;
    closeBluetoothAdapter: (params: CloseBluetoothAdapterParams) => void;
    getBluetoothAdapterState: (params: GetBluetoothAdapterStateParams) => void;
    onBluetoothAdapterStateChange: (callback: (res: OnGetBluetoothAdapterStateRes) => void) => void;
    startBluetoothDevicesDiscovery: (params: StartBluetoothDevicesDiscoveryParams) => void;
    stopBluetoothDevicesDiscovery: (params: StopBluetoothDevicesDiscoveryParams) => void;
    getBluetoothDevices: (params: GetBluetoothDevicesParams) => void;
    onBluetoothDeviceFound: (callback: (devices: BluetoothDevice[]) => void) => void;
    getConnectedBluetoothDevices: (params: GetConnectedBluetoothDevicesParams) => void;
    createBLEConnection: (params: CreateBLEConnectionParams) => void;
    closeBLEConnection: (params: CloseBLEConnectionParams) => void;
    onBLEConnectionStateChange: (callback: (res: OnBLEConnectionStateChangeRes) => void) => void;
    getBLEDeviceServices: (params: GetBLEDeviceServicesParams) => void;
    getBLEDeviceCharacteristics: (params: GetBLEDeviceCharacteristicsParams) => void;
    onBLECharacteristicValueChange: (callback: (res: OnBLECharacteristicValueChangeRes) => void) => void;
    readBLECharacteristicValue: (params: ReadBLECharacteristicValueParams) => void;
    writeBLECharacteristicValue: (params: WriteBLECharacteristicValueParams) => void;
    notifyBLECharacteristicValueChange: (params: NotifyBLECharacteristicValueChangeParams) => void;
    startBeaconDiscovery: (params: StartBeaconDiscoveryParams) => void;
    stopBeaconDiscovery: (params: StopBeaconDiscoveryParams) => void;
    getBeacons: (params: GetBeaconsParams) => void;
    onBeaconUpdate: (callback: (res: OnBeaconUpdateRes) => void) => void;
    onBeaconServiceChange: (callback: (res: OnBeaconServiceChangeRes) => void) => void;
    setClipboardData: (params: SetClipboardDataParams) => void;
    getClipboardData: (params: GetClipboardDataParams) => void;
    getNetworkType: (params: GetNetworkTypeParams) => void;
    openLocation: (params: OpenLocationParams) => void;
    getLocation: (params: GetLocationParams) => void;
    onLocationChange: (callback: (res: OnLocationChangeRes) => void) => void;
    invoke: <K extends keyof InvokeMap>(apiName: K, params: InvokeMap[K]["params"], callback: WxInvokeCallback<InvokeMap[K]["res"]>) => void;
}
